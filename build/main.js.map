{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport { Listener } from \"./listener/listener\";\nimport { LoginManager } from \"./login/loginmanager\";\nimport { Client } from \"./server/client\";\nimport { AnswerSubscribeToDataPointsPack } from \"./server/datapacks\";\nimport { TemplateManager } from \"./template/template_manager\";\nimport { NotificationManager } from \"./notification/notification_manager\";\nimport { GrpcServer } from \"./server/grpc/grpc-server\";\ntype DatapointState = {\n    val?: any,\n    ack?: boolean\n};\ntype ClientInfo = {\n    firstload?: boolean\n};\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nexport class SamartHomeHandyBis extends utils.Adapter {\n    server?: GrpcServer;\n    listener: Listener;\n    loginManager: LoginManager;\n    notificationManager: NotificationManager;\n    port: number = 8095;\n    keyPath: string = \"\";\n    certPath: string = \"\";\n    useCer: boolean = false;\n    templateManager: TemplateManager;\n    clientinfos: {[key: string]: ClientInfo} = {};\n    valueDatapoints: {[key: string]: DatapointState} = {};\n    lang: string = \"de\";\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"hiob\",\n        });\n        this.templateManager = new TemplateManager(this);\n        this.listener = new Listener(this);\n        this.notificationManager = new NotificationManager(this);\n        this.loginManager = new LoginManager(this);\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.listener.onStateChange.bind(this.listener));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n        this.server = undefined;\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n        // Reset the connection indicator during startup\n        this.setState(\"info.connection\", true, true);\n\n        if (this.config.port < 1025) {\n            this.log.warn(`Port is automatically changed because it is less than 1025 - ${this.config.port}`);\n            this.config.port = 8095;\n        } else if (this.config.port > 65535) {\n            this.log.warn(`Port will be changed automatically as it is greater than 65535 - ${this.config.port}`);\n            this.config.port = 8095;\n        }\n\n        const check_port = await this.getPortAsync(this.config.port);\n        if (check_port != this.config.port) {\n            this.log.warn(`Port ${this.config.port} is used!! Change to port ${check_port}.`);\n            this.config.port = check_port;\n        }\n\n        await this.setObjectNotExistsAsync(`devices`, {\n            type: \"device\",\n            common: {\n                name: {\n                    \"en\": \"Mobile phones\",\n                    \"de\": \"Handys\",\n                    \"ru\": \"\u041C\u043E\u0431\u0438\u043B\u044C\u043D\u044B\u0439 \u0442\u0435\u043B\u0435\u0444\u043E\u043D\",\n                    \"pt\": \"Telefones m\u00F3veis\",\n                    \"nl\": \"Mobiele telefoons\",\n                    \"fr\": \"T\u00E9l\u00E9phones mobiles\",\n                    \"it\": \"Telefoni cellulari\",\n                    \"es\": \"Tel\u00E9fonos m\u00F3viles\",\n                    \"pl\": \"Telefon kom\u00F3rkowy\",\n                    \"uk\": \"\u041C\u043E\u0431\u0456\u043B\u044C\u043D\u0456 \u0442\u0435\u043B\u0435\u0444\u043E\u043D\u0438\",\n                    \"zh-cn\": \"\u79FB\u52A8\u7535\u8BDD\"\n                },\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync(\"approveNextLogins\", {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"Connected\",\n                    de: \"Verbunden\",\n                    ru: \"\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435\",\n                    pt: \"Conectado\",\n                    nl: \"Verbonden\",\n                    fr: \"Connect\u00E9\",\n                    it: \"Collegato\",\n                    es: \"Conectado\",\n                    pl: \"Po\u0142\u0105czone\",\n                    uk: \"\u0417\u0432'\u044F\u0437\u0430\u0442\u0438\u0441\u044F\",\n                    \"zh-cn\": \"\u5DF2\u8FDE\u63A5\",\n                },\n                type: \"boolean\",\n                role: \"button\",\n                def: false,\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n        await this.setStateAsync(\"approveNextLogins\", false, true);\n        this.subscribeStates(\"*\");\n        this.check_aes_key();\n        this.loadConfigs();\n        this.initServer();\n        const obj = await this.getForeignObjectAsync(\"system.config\");\n        if (obj && obj.common && obj.common.language) {\n            try {\n                this.lang = obj.common.language === this.lang ? this.lang : obj.common.language;\n            } catch (e) {\n                // Nothing\n            }\n        }\n\n    }\n\n    private loadConfigs(): void {\n        this.port = Number(this.config.port);\n        this.certPath = this.config.certPath;\n        this.useCer = this.config.useCert;\n        this.keyPath = this.config.keyPath;\n    }\n\n    private async check_aes_key(): Promise<void> {\n        const channels = await this.getChannelsAsync();\n        for (const element of channels) {\n            const id = `${this.namespace}.devices`\n            if (element[\"_id\"].startsWith(id)) {\n                const state = await this.getStateAsync(`${element[\"_id\"]}.aesKey`);\n                if (state != null && state.val != null) {\n                    if (state.val.toString().length === 6) {\n                        const shaAes = this.encrypt(state.val.toString());\n                        await this.setStateAsync(`${element[\"_id\"]}.aesKey`, shaAes, true);\n                    }\n                }\n            }\n        }\n    }\n\n    private initServer(): void {\n        this.server = new GrpcServer(this.port, this.keyPath, this.certPath, this, this.useCer);\n        this.server.startServer();\n    }\n\n    public async getEnumListJSON(id: string): Promise<\n        {\n            id: string;\n            name: ioBroker.StringOrTranslated;\n            icon: string | undefined;\n            dataPointMembers: {\n                name: any;\n                id: any;\n                role: any;\n                otherDetails: any;\n            }[];\n        }[]\n    > {\n        const list: {\n            id: string;\n            name: ioBroker.StringOrTranslated;\n            icon: string | undefined;\n            dataPointMembers: {\n                name: any;\n                id: any;\n                role: any;\n                otherDetails: any;\n            }[];\n        }[] = [];\n\n        const enumDevices = await this.getForeignObjectsAsync(id, \"enum\");\n\n        for (const i in enumDevices) {\n            const members: string[] | undefined = enumDevices[i].common.members;\n            if (!members) {\n                continue;\n            }\n            const dataPoints: any[] = [];\n            if (!dataPoints) {\n                continue;\n            }\n            for (const z of members) {\n                const dataPoint = await this.getForeignObjectAsync(z);\n                if (!dataPoint) continue;\n                const name: ioBroker.Translated | string | undefined = dataPoint!.common.name;\n                if (typeof name == \"object\") {\n                    /**\n                     * Translation\n                     */\n                    const translated: ioBroker.Translated = name as ioBroker.Translated;\n                    const translatedString = translated[this.lang as ioBroker.Languages];\n                    if (translatedString) {\n                        dataPoints.push({\n                            name: translatedString,\n                            id: z,\n                            role: dataPoint!.common.role,\n                            otherDetails: dataPoint!.common.custom,\n                        });\n                    } else {\n                        dataPoints.push({\n                            name: name,\n                            id: z,\n                            role: dataPoint!.common.role,\n                            otherDetails: dataPoint!.common.custom,\n                        });\n                    }\n                } else {\n                    dataPoints.push({\n                        name: name,\n                        id: z,\n                        role: dataPoint!.common.role,\n                        otherDetails: dataPoint!.common.custom,\n                    });\n                }\n            }\n            const map = {\n                id: enumDevices[i]._id,\n                name: enumDevices[i].common.name,\n                icon: enumDevices[i].common.icon,\n                dataPointMembers: dataPoints,\n            };\n            list.push(map);\n        }\n\n        return list;\n    }\n\n\n    public async subscribeToDataPointsProto(dataPoints: string[]): Promise<{\n        objectID: string,\n        val: any,\n        ack: boolean | undefined\n    }[]> {\n        this.log.debug(\"Trying to subscribe to \" + dataPoints.length+ \" Datapoints\");\n        const all_dp : {\n            objectID: string\n            val: any,\n            ack: boolean | undefined\n        }[] = [];\n        for (const i of dataPoints) {\n            let state = null;\n            try {\n                if (this.valueDatapoints[i] == null) {\n                    state = await this.getForeignStateAsync(i);\n                    this.log.debug(\"Use getForeignStateAsync\" );\n                } else {\n                    this.log.debug(\"Use memory\");\n                    state = {\n                        objectID: i,\n                        val: this.valueDatapoints[i].val,\n                        ack: this.valueDatapoints[i].ack,\n                    };\n                }\n            } catch (e) {\n                this.log.warn(\"App tried to request to a deleted datapoint. ID:\" + i + e);\n                continue;\n            }\n\n            if (state) {\n                if (state.ts != null) {\n                    this.valueDatapoints[i] = {};\n                    this.valueDatapoints[i].val = state.val;\n                    this.valueDatapoints[i].ack = state.ack;\n                }\n                //this.log.info(\"sub to \" + dataPoints[i]);\n                const map = {\n                    objectID: i,\n                    val: state.val,\n                    ack: state.ack,\n                };\n                all_dp.push(map);\n\n                this.listener.addPendingSubscribeState(i);\n            } else {\n                this.log.warn(\"App tried to request to a deleted datapoint. \" + i);\n            }\n        }\n        this.listener.subscribeToPendingStates();\n        return all_dp;\n    }\n\n\n\n    /**\n     * @deprecated\n     * @param dataPoints\n     * @param client\n     */\n    public async subscribeToDataPoints(dataPoints: { [x: string]: any }, client: Client): Promise<void> {\n        this.log.debug(JSON.stringify(dataPoints));\n        const all_dp = [];\n        for (const i in dataPoints) {\n            let state = null;\n            try {\n                if (this.valueDatapoints[dataPoints[i]] == null) {\n                    this.valueDatapoints[dataPoints[i]] = {};\n                    state = await this.getForeignStateAsync(dataPoints[i]);\n                    this.log.debug(\"Use getForeignStateAsync\");\n                } else {\n                    this.log.debug(\"Use memory\");\n                    state = {\n                        val: this.valueDatapoints[dataPoints[i]].val,\n                        ack: this.valueDatapoints[dataPoints[i]].ack,\n                    };\n                }\n            } catch (e) {\n                this.log.warn(\"App tried to request to a deleted datapoint. \" + dataPoints[i]);\n                continue;\n            }\n            if (state) {\n                if (state.ts != null) {\n                    this.valueDatapoints[dataPoints[i]].val = state.val;\n                    this.valueDatapoints[dataPoints[i]].ack = state.ack;\n                }\n                //this.log.info(\"sub to \" + dataPoints[i]);\n                const map = {\n                    objectID: dataPoints[i],\n                    value: state.val,\n                    ack: state.ack,\n                };\n                all_dp.push(map);\n                this.listener.addPendingSubscribeState(dataPoints[i]);\n            } else {\n                this.log.warn(\"App tried to request to a deleted datapoint. \" + dataPoints[i]);\n            }\n        }3\n        if (all_dp.length > 0) {\n            this.listener.subscribeToPendingStates();\n            client.sendMSG(new AnswerSubscribeToDataPointsPack(all_dp).toJSON(), true);\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Stop ws Server and Timeouts\n            this.loginManager.stop();\n            this.server = undefined;\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    // \tif (obj) {\n    // \t\t// The object was changed\n    // \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    // \t} else {\n    // \t\t// The object was deleted\n    // \t\tthis.log.info(`object ${id} deleted`);\n    // \t}\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    //private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n    //    if (state) {\n    //        // The state was changed\n    //        this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n    //    } else {\n    //        // The state was deleted\n    //        this.log.info(`state ${id} deleted`);\n    //    }\n    //}\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    private onMessage(obj: ioBroker.Message): void {\n        if (typeof obj === \"object\" && obj.message) {\n            if (obj.command === \"send\") {\n                this.log.debug(\"send command\");\n                const message = obj.message;\n                if (\"notification\" in message && \"uuid\" in message) {\n                    //Send Not.\n                    const cl: Client | undefined = this.server?.getClient(message[\"uuid\"]);\n                    this.notificationManager.sendNotificationLocal(cl, message[\"uuid\"], JSON.stringify(message[\"notification\"]));\n                    if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n                } else {\n                    if (obj.callback) this.sendTo(obj.from, obj.command, \"Error received\", obj.callback);\n                }\n            }\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SamartHomeHandyBis(options);\n} else {\n    // otherwise start the instance directly\n    (() => new SamartHomeHandyBis())();\n}\n"],
  "mappings": "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",
  "names": []
}

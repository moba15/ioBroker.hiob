{
  "version": 3,
  "sources": ["../../src/login/loginmanager.ts"],
  "sourcesContent": ["import { Events, StateChangeEvent } from \"../listener/listener\";\nimport { SamartHomeHandyBis } from \"../main\";\nimport { Client } from \"../server/client\";\nimport {\n    LoginApprovedPacket,\n    LoginDeclinedPacket,\n    LoginKeyPacket,\n    RequestLoginPacket,\n    WrongAesKeyPack,\n    NewAesPacket,\n} from \"../server/datapacks\";\nimport * as bcrypt from \"bcrypt\";\nimport * as crypto from \"crypto\";\nimport * as proto from \"../generated/login/login\";\nimport { EventEmitter, Stream } from \"stream\";\nimport { Listener } from \"@grpc/grpc-js\";\nimport { resolve } from \"path\";\nimport { rejects } from \"assert\";\nexport class LoginManager {\n    adapter: SamartHomeHandyBis;\n    pendingClients: Client[];\n    pendingClientIds: string[];\n    approveLogins: boolean = false;\n    approveLoginsTimeout: any;\n    aesViewTimeout: { [deviceID: string]: any } = {};\n    streams: Stream[];\n\n    constructor(adapter: SamartHomeHandyBis) {\n        this.adapter = adapter;\n        this.adapter.listener.on(Events.StateChange, this.onStateChange.bind(this));\n        this.pendingClients = [];\n        this.approveLoginsTimeout = undefined;\n        this.pendingClientIds = [];\n        this.streams = [];\n        \n        \n        \n    }\n\n    private async onStateChange(event: StateChangeEvent): Promise<void> {\n        if (event.objectID.startsWith(\"hiob.\") && !event.ack) {\n            const splited = event.objectID.split(\".\");\n            //If Datapoint is approved Datapoint\n            if (splited.length > 4 && splited[2] == \"devices\") {\n                const deviceID = splited[3];\n                if (splited[4] == \"approved\") {\n                    //Get Client from pending list\n                    const cl = this.pendingClients.find((e) => e.id == deviceID);\n                    //If Approved was set to true\n                    if (cl && event.value) {\n                        this.setAndSendLoginKeys(deviceID, cl);\n                    } else {\n                        const client = this.adapter.server?.getClient(deviceID);\n                        if (client) {\n                            this.setAndSendLoginKeys(deviceID, client);\n                        } else {\n                            this.adapter.log.debug(\"No pending client found\");\n                        }\n                    }\n                    this.adapter.setStateAsync(event.objectID, {ack: true});\n                } else if (splited[4] == \"aesKey_active\") {\n                    const cl = this.pendingClients.find((e) => e.id == deviceID);\n                    if (cl) {\n                        if (event.value) {\n                            this.setAesStatus(deviceID, cl);\n                        } else {\n                            cl.setAESKey(\"\");\n                            this.adapter.log.info(`AES encryption disabled!`);\n                        }\n                        this.adapter.setState(event.objectID, { ack: true });\n                    } else {\n                        const client = this.adapter.server?.getClient(deviceID);\n                        if (client) {\n                            this.setAesStatus(deviceID, client);\n                        } else {\n                            this.adapter.log.debug(\"No pending client found\");\n                        }\n                    }\n                    this.adapter.setStateAsync(event.objectID, {ack: true});\n                } else if (splited[4] == \"aesKey_view\") {\n                    this.viewAesKey(deviceID);\n                    this.adapter.setStateAsync(event.objectID, false, true);\n                } else if (splited[4] == \"aesKey_new\") {\n                    const cl = this.pendingClients.find((e) => e.id == deviceID);\n                    if (cl) {\n                        if (event.value) {\n                            this.setAesNewAndSentInfo(deviceID, cl);\n                        }\n                        this.adapter.setState(event.objectID, false, true);\n                    } else {\n                        const client = this.adapter.server?.getClient(deviceID);\n                        if (client && event.value) {\n                            this.setAesNewAndSentInfo(deviceID, client);\n                        } else {\n                            this.adapter.log.debug(\"No pending client found\");\n                        }\n                    }\n                    this.adapter.setStateAsync(event.objectID, false, true);\n                } else if (splited[4] == \"noPwdAllowed\") {\n                    this.adapter.setStateAsync(event.objectID, {ack: true});\n                }\n            } else if (splited[2] == \"approveNextLogins\") {\n                this.setApproveNextLogins(event.value);\n            }\n        }\n    }\n\n    private setApproveNextLogins(value: boolean): void {\n        if (value) {\n            if (this.approveLoginsTimeout) {\n                this.adapter.clearTimeout(this.approveLoginsTimeout);\n                this.approveLoginsTimeout = undefined;\n            }\n            this.approveLogins = true;\n            // Start timer without set ack flag true\n            this.approveLoginsTimeout = this.adapter.setTimeout(() => {\n                this.approveLogins = false;\n                this.approveLoginsTimeout = undefined;\n            this.adapter.setStateAsync(\"approveNextLogins\", false, true);\n            }, 1000 * 60);\n        } else {\n            this.approveLogins = false;\n            this.adapter.setStateAsync(\"approveNextLogins\", {ack: true});\n        }\n    }\n\n    private async viewAesKey(deviceID: string): Promise<void> {\n        if (!this.aesViewTimeout[deviceID]) {\n            const state = await this.adapter.getStateAsync(`devices.${deviceID}.aesKey`);\n            if (state != null && state.val != null) {\n                if (state.val.toString().length > 6) {\n                    const dec_shaAes = this.adapter.decrypt(state.val.toString());\n                    await this.adapter.setStateAsync(`devices.${deviceID}.aesKey`, dec_shaAes, true);\n                }\n            } else {\n                return;\n            }\n            this.aesViewTimeout[deviceID] = this.adapter.setTimeout( async () => {\n                const state = await this.adapter.getStateAsync(`devices.${deviceID}.aesKey`);\n                if (state != null && state.val != null) {\n                    if (state.val.toString().length === 6) {\n                        const shaAes = this.adapter.encrypt(state.val.toString());\n                        await this.adapter.setStateAsync(`devices.${deviceID}.aesKey`, shaAes, true);\n                    }\n                }\n                this.aesViewTimeout[deviceID] = undefined;\n            }, 1000 * 60);\n        }\n    }\n\n    private async setAesNewAndSentInfo(deviceID: string, cl: Client): Promise<void> {\n        if (this.aesViewTimeout[deviceID]) {\n            this.adapter.clearTimeout(this.aesViewTimeout[deviceID]);\n            this.aesViewTimeout[deviceID] = undefined;\n        }\n        const random_key = this.genRandomString(6, true);\n        await this.adapter.setStateAsync(`devices.${deviceID}.aesKey`, this.adapter.encrypt(random_key.toString()), true);\n        cl.aesKey = random_key;\n        cl.setAESKey(random_key);\n        cl.sendMSG(new NewAesPacket().toJSON(), false);\n    }\n\n    private async setAesStatus(deviceID: string, cl: Client): Promise<void> {\n        const get_aes = await this.adapter.getStateAsync(`devices.${deviceID}.aesKey`);\n        const aes_status = await this.adapter.getStateAsync(`devices.${deviceID}.aesKey_active`);\n        if (get_aes && get_aes.val && aes_status && aes_status.val) {\n            if (get_aes.val.toString().length > 6) {\n                get_aes.val = this.adapter.decrypt(get_aes.val.toString());\n            }\n            cl.setAESKey(get_aes.val.toString());\n            this.adapter.log.info(`AES encryption enabled!`);\n        } else {\n            cl.setAESKey(\"\");\n            this.adapter.log.info(`AES encryption disabled!`);\n        }\n    }\n    \n    /**\n     * @deprecated\n     * @param deviceID \n     * @param cl \n     */\n    private async setAndSendLoginKeys(deviceID: string, cl: Client): Promise<void> {\n        const keys = await this.genKey();\n        const aes_status = await this.adapter.getStateAsync(\"devices.\" + deviceID + \".aesKey_active\");\n        if (aes_status && aes_status.val) {\n            const aes = await this.adapter.getStateAsync(\"devices.\" + deviceID + \".aesKey\");\n            if (aes != null && aes.val != null) {\n                if (aes.val.toString().length > 6) {\n                    aes.val = this.adapter.decrypt(aes.val.toString());\n                }\n                cl.setAESKey(aes.val.toString());\n            } else {\n                cl.setAESKey(\"\");\n            }\n        } else {\n            cl.setAESKey(\"\");\n        }\n        await this.adapter.setStateAsync(\"devices.\" + deviceID + \".key\", keys[1], true);\n        for (const current of this.pendingClients) {\n            if (current.id == cl.id) {\n                current.sendMSG(new LoginKeyPacket(keys[0]).toJSON(), false, false);\n            }\n        }\n    }\n\n\n\n    public async stop(): Promise<boolean> {\n        this.approveLoginsTimeout && this.adapter.clearTimeout(this.approveLoginsTimeout);\n        this.approveLoginsTimeout = undefined;\n        if (this.aesViewTimeout && Object.keys(this.aesViewTimeout).length > 0) {\n            for (const cl in this.aesViewTimeout) {\n                this.aesViewTimeout[cl] && this.adapter.clearTimeout(this.aesViewTimeout[cl]);\n                this.aesViewTimeout[cl] = undefined;\n            }\n        }\n        return false;\n    }\n\n    public async onWrongAesKey(client: Client): Promise<boolean> {\n        this.adapter.log.debug(\"Client(\" + client.toString() + \") send wrong aes!\");\n        this.wrongAesKey(client);\n        return false;\n    }\n\n    public async onLoginRequestProto(loginRequest : proto.LoginRequest): Promise<proto.LoginResponse> { \n        \n\n        this.adapter.log.debug(\"Client(\" + loginRequest + \") requested to login\");\n        let sessionId = this.genRandomString(12, true);\n        this.pendingClientIds.push(sessionId);\n        let deviceIDRep = loginRequest.deviceId.replace(\".\", \"-\");\n        while (deviceIDRep.includes(\".\")) {\n            deviceIDRep = deviceIDRep.replace(\".\", \"-\");\n        }\n\n        await this.createObjects(\n            deviceIDRep,\n            loginRequest.deviceName,\n            loginRequest.key,\n            \"No version\"\n        );\n        this.adapter.setStateAsync(\"devices.\" + deviceIDRep + \".connected\", true, true);\n        let validdate = await this.validateLoginRequestProto(loginRequest.deviceName, deviceIDRep, loginRequest);\n        if (validdate != proto.LoginResponse.Status.succesfull) {\n            //Login declined\n            \n            return  new proto.LoginResponse({sessionId: sessionId, status: proto.LoginResponse.Status.error});;\n        }\n        this.adapter.log.debug(\"Login approved\");\n        return new proto.LoginResponse({sessionId: sessionId, status: proto.LoginResponse.Status.succesfull});\n    }\n\n   async requestApproval(request: proto.ApprovalRequest) : Promise<proto.ApprovalResponse> {\n        this.adapter.log.debug(\"Client \" + request.deviceName + \" requests approval\");\n        \n        let deviceIDRep = request.deviceId.replace(\".\", \"-\");\n        while (deviceIDRep.includes(\".\")) {\n            deviceIDRep = deviceIDRep.replace(\".\", \"-\");\n        }\n        \n       \n        \n       let approved = await new Promise<boolean>((resolve, rejects) => {\n        let onChange = (event: StateChangeEvent) => {\n            resolve(event.value);\n        }\n         //TODO Dynamic\n        this.adapter.listener.once(Events.StateChange + \"hiob.0.devices.\" + deviceIDRep+ \".approved\",  onChange.bind(this));\n       });\n       \n       this.adapter.log.debug(\"Client \" + request.deviceName + \" request for approval: \" + approved);\n       if(approved) {\n        //Gen key\n        this.adapter.log.debug(\"Generating new key\");\n            const keys = await this.genKey();\n            await this.adapter.setStateAsync(\"devices.\" + deviceIDRep + \".key\", keys[1], true);\n        return new proto.ApprovalResponse({key: keys[0], status: proto.ApprovalResponse.Status.aprroved});\n       } else {\n        return new proto.ApprovalResponse({key: \"\", status: proto.ApprovalResponse.Status.timeout});\n       }\n\n\n\n        \n        \n        \n        \n    \n    }\n\n    public async onLoginRequest(client: Client, loginRequestData: RequestLoginPacket): Promise<boolean> {\n        this.adapter.log.debug(\"Client(\" + client.toString() + \") requested to login\");\n        this.pendingClients.push(client);\n        this.pendingClients = this.pendingClients.filter((cli, i, s) => s.indexOf(cli) == i);\n        let deviceIDRep = loginRequestData.deviceID.replace(\".\", \"-\");\n        while (deviceIDRep.includes(\".\")) {\n            deviceIDRep = deviceIDRep.replace(\".\", \"-\");\n        }client.id = deviceIDRep;\n        if (!this.adapter.clientinfos[deviceIDRep] || !this.adapter.clientinfos[deviceIDRep].firstload) {\n            this.adapter.clientinfos[deviceIDRep] = {};\n        }\n        //!Quick fix\n        await this.createObjects(\n          \n            deviceIDRep,\n            loginRequestData.deviceName,\n            loginRequestData.key,\n            loginRequestData.version,\n        );\n        this.adapter.clientinfos[deviceIDRep].firstload = true;\n        this.adapter.setStateAsync(\"devices.\" + deviceIDRep + \".connected\", true, true);\n        client.setID(deviceIDRep);\n        if (!(await this.validateLoginRequest(client, deviceIDRep, loginRequestData))) {\n            this.loginDeclined(client);\n            return false;\n        }\n        this.pendingClients = this.pendingClients.filter((cl, ) => cl != client);\n        await this.setAesStatus(deviceIDRep, client);\n        client.onApprove();\n        const version = this.adapter.version != null ? this.adapter.version.toString() : \"\";\n        client.sendMSG(new LoginApprovedPacket(version).toJSON(), false);\n        return true;\n    }\n    /**\n    * @deprecated The method should not be used\n    */\n    private async validateLoginRequest(\n        client: Client,\n        deviceIDRep: string,\n        loginRequestData: RequestLoginPacket,\n    ): Promise<boolean> {\n        const approved = await this.adapter.getStateAsync(\"devices.\" + deviceIDRep + \".approved\");\n        const keyState = await this.adapter.getStateAsync(\"devices.\" + deviceIDRep + \".key\");\n        const needPWD = await this.adapter.getStateAsync(\"devices.\" + deviceIDRep + \".noPwdAllowed\");\n        //Check if next should be accepted:\n        let apr = true;\n        if (!approved || !approved.val) {\n            this.adapter.log.debug(\n                \"Login declined for client: \" +\n                    client.toString() +\n                    \" (\" +\n                    loginRequestData.deviceName +\n                    \"): not approved\",\n            );\n            apr = false;\n        }\n        if (keyState == null || keyState.val == null) {\n            apr = false;\n        }\n        if (!loginRequestData.key) {\n            apr = false;\n        }\n\n        if (needPWD && !needPWD?.val) {\n            if (\n                !loginRequestData.user ||\n                !loginRequestData.password ||\n                !(await this.adapter.checkPasswordAsync(loginRequestData.user, loginRequestData.password))\n            ) {\n                this.adapter.log.debug(\n                    \"Login declined for client: \" +\n                        client.toString() +\n                        \" (\" +\n                        loginRequestData.deviceName +\n                        \"): wrong password\",\n                );\n                apr = false;\n            }\n        }\n        if (loginRequestData.key == null) {\n            apr = false;\n        }\n        if (\n            keyState != null &&\n            keyState.val != null &&\n            loginRequestData.key &&\n            !(await bcrypt.compare(loginRequestData.key, keyState.val.toString()))\n        ) {\n            this.adapter.log.debug(\n                \"Login declined for client: \" +\n                    client.toString() +\n                    \" (\" +\n                    loginRequestData.deviceName +\n                    \"): wrong key\" +\n                    !(await bcrypt.compare(loginRequestData.key, keyState.val.toString())),\n            );\n            apr = false;\n        }\n        if (!apr && this.approveLogins) {\n            await this.adapter.setStateAsync(\"devices.\" + deviceIDRep + \".approved\", true, true);\n\n            //Send Login Keys\n            await this.setAndSendLoginKeys(deviceIDRep, client);\n\n            apr = true;\n        }\n        return apr;\n    }\n\n\n    /**\n     * This method validdates the Loginrequest based on the key and password\n     * @param clientName \n     * @param deviceIDRep \n     * @param loginRequestData \n     * @returns true if valid, false if invalid\n     */\n    private async validateLoginRequestProto(\n        clientName: string,\n        deviceIDRep: string,\n        loginRequestData: proto.LoginRequest,\n    ): Promise< proto.LoginResponse.Status> {\n        const approved = await this.adapter.getStateAsync(\"devices.\" + deviceIDRep + \".approved\");\n        const keyState = await this.adapter.getStateAsync(\"devices.\" + deviceIDRep + \".key\");\n        const needPWD = await this.adapter.getStateAsync(\"devices.\" + deviceIDRep + \".noPwdAllowed\");\n        //Check if next should be accepted:\n        let apr = proto.LoginResponse.Status.succesfull;\n        if (!approved || !approved.val) {\n            this.adapter.log.debug(\n                \"Login declined for client: \" +\n                     clientName +\n                    \" (\" +\n                    loginRequestData.deviceName +\n                    \"): not approved\",\n            );\n            apr = proto.LoginResponse.Status.notApproved;\n        }\n        if (keyState == null || keyState.val == null) {\n            apr = proto.LoginResponse.Status.error;\n        }\n        if (!loginRequestData.key) {\n            apr = proto.LoginResponse.Status.wrongKey;\n        }\n\n        if (needPWD && !needPWD?.val) {\n            if (\n                !loginRequestData.user ||\n                !loginRequestData.password ||\n                !(await this.adapter.checkPasswordAsync(loginRequestData.user, loginRequestData.password))\n            ) {\n                this.adapter.log.debug(\n                    \"Login declined for client: \" +\n                            clientName +\n                        \" (\" +\n                        loginRequestData.deviceName +\n                        \"): wrong password\",\n                );\n                apr = proto.LoginResponse.Status.wrongPassword;\n            }\n        }\n        if (loginRequestData.key == null) {\n            apr = proto.LoginResponse.Status.wrongKey;\n        }\n        if (\n            keyState != null &&\n            keyState.val != null &&\n            loginRequestData.key &&\n            !(await bcrypt.compare(loginRequestData.key, keyState.val.toString()))\n        ) {\n            this.adapter.log.debug(\n                \"Login declined for client: \" +\n                        clientName+\n                    \" (\" +\n                    loginRequestData.deviceName +\n                    \"): wrong key\" +\n                    !(await bcrypt.compare(loginRequestData.key, keyState.val.toString())),\n            );\n            apr = proto.LoginResponse.Status.wrongKey;\n        }\n        if (!apr && this.approveLogins) {\n            await this.adapter.setStateAsync(\"devices.\" + deviceIDRep + \".approved\", true, true);\n            apr = proto.LoginResponse.Status.succesfull;\n        }\n        return apr;\n    }\n\n\n\n\n    /**\n     * This method creates all IoBroker Objects needed for the login request. If they exists this method will not create any\n     * @param deviceIDRep Id of the device\n     * @param deviceName Name of the device\n     */\n    private async createObjects(\n       \n        deviceIDRep: string,\n        deviceName: string,\n        key: string,\n        version: string,\n    ): Promise<void> {\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}`, {\n            type: \"channel\",\n            common: {\n                name: deviceName,\n                desc: \"Created by Adapter\",\n            },\n            native: {},\n        });\n        // Delete setObjectAsync after first latest release -->\n        await this.adapter.setObjectAsync(`devices.${deviceIDRep}`, {\n            type: \"channel\",\n            common: {\n                name: deviceName,\n                desc: \"Created by Adapter\",\n            },\n            native: {},\n        });\n        // <-- Delete setObjectAsync after first latest release\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}.connected`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"Connected\",\n                    de: \"Verbunden\",\n                    ru: \"\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435\",\n                    pt: \"Conectado\",\n                    nl: \"Verbonden\",\n                    fr: \"Connect\u00E9\",\n                    it: \"Collegato\",\n                    es: \"Conectado\",\n                    pl: \"Po\u0142\u0105czone\",\n                    uk: \"\u0417\u0432'\u044F\u0437\u0430\u0442\u0438\u0441\u044F\",\n                    \"zh-cn\": \"\u5DF2\u8FDE\u63A5\",\n                },\n                type: \"boolean\",\n                role: \"info.status\",\n                desc: \"Created by Adapter\",\n                def: true,\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}.app_version`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"APP Version\",\n                    de: \"APP-Version\",\n                    ru: \"\u0412\u0435\u0440\u0441\u0438\u044F APP\",\n                    pt: \"Vers\u00E3o do APP\",\n                    nl: \"Versie APP\",\n                    fr: \"Version APP\",\n                    it: \"Versione APP\",\n                    es: \"Versi\u00F3n APP\",\n                    pl: \"Wersja APP\",\n                    uk: \"\u0412\u0435\u0440\u0441\u0456\u044F APP\",\n                    \"zh-cn\": \"APP \u7248\u672C\",\n                },\n                type: \"string\",\n                role: \"info.firmware\",\n                desc: \"Created by Adapter\",\n                def: version,\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        await this.adapter.setStateAsync(`devices.${deviceIDRep}.app_version`, version, true);\n        await this.adapter.setObjectAsync(`devices.${deviceIDRep}.name`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"Name\",\n                    de: \"Name\",\n                    ru: \"\u0418\u043C\u044F\",\n                    pt: \"Nome\",\n                    nl: \"Naam\",\n                    fr: \"D\u00E9nomination\",\n                    it: \"Nome\",\n                    es: \"Nombre\",\n                    pl: \"Nazwa\",\n                    uk: \"\u0406\u043C'\u044F\",\n                    \"zh-cn\": \"\u540D\u79F0\",\n                },\n                type: \"string\",\n                role: \"info.name\",\n                desc: \"Created by Adapter\",\n                def: deviceName,\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n\n        await this.adapter.setStateAsync(`devices.${deviceIDRep}.name`, deviceName, true);\n\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}.id`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"ID\",\n                    de: \"ID\",\n                    ru: \"ID\",\n                    pt: \"ID\",\n                    nl: \"ID\",\n                    fr: \"NUM\u00C9RO\",\n                    it: \"ID\",\n                    es: \"ID\",\n                    pl: \"ID\",\n                    uk: \"\u0406\u041C'\u042F\",\n                    \"zh-cn\": \"\u8EAB\u4EFD\u8BC1\",\n                },\n                type: \"string\",\n                role: \"info.address\",\n                desc: \"Created by Adapter\",\n                def: deviceIDRep,\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}.key`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"Key\",\n                    de: \"Schl\u00FCssel\",\n                    ru: \"\u041A\u043B\u044E\u0447\",\n                    pt: \"Chaveiro\",\n                    nl: \"Sleutel\",\n                    fr: \"Cl\u00E9\",\n                    it: \"Chiave\",\n                    es: \"Clave\",\n                    pl: \"Klucz\",\n                    uk: \"\u0413\u043E\u043B\u043E\u0432\u043D\u0430\",\n                    \"zh-cn\": \"\u5BC6\u94A5\",\n                },\n                type: \"string\",\n                role: \"state\",\n                desc: \"Created by Adapter\",\n                def: key,\n                read: false,\n                write: false,\n            },\n            native: {},\n        });\n\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}.lastConnection`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"Last Connection\",\n                    de: \"Letzte Verbindung\",\n                    ru: \"\u041F\u043E\u0441\u043B\u0435\u0434\u043D\u0435\u0435 \u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435\",\n                    pt: \"\u00DAltima conex\u00E3o\",\n                    nl: \"Laatste verbinding\",\n                    fr: \"Derni\u00E8re connexion\",\n                    it: \"Ultima connessione\",\n                    es: \"\u00DAltima conexi\u00F3n\",\n                    pl: \"Ostatnie po\u0142\u0105czenie\",\n                    uk: \"\u041E\u0441\u0442\u0430\u043D\u043D\u0454 \u043F\u0456\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u043D\u044F\",\n                    \"zh-cn\": \"\u4E0A\u6B21\u8FDE\u63A5\",\n                },\n                type: \"number\",\n                role: \"date\",\n                desc: \"Created by Adapter\",\n                def: 0,\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n\n        this.adapter.setState(`devices.${deviceIDRep}.lastConnection`, Date.now(), true);\n\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}.approved`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"Approved\",\n                    de: \"Genehmigt\",\n                    ru: \"\u0423\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043D\u043D\u044B\u0435\",\n                    pt: \"Aprovado\",\n                    nl: \"Goedgekeurd\",\n                    fr: \"Approuv\u00E9\",\n                    it: \"Approvazione\",\n                    es: \"Aprobado\",\n                    pl: \"Zatwierdzone\",\n                    uk: \"\u0417\u0430\u0442\u0432\u0435\u0440\u0434\u0436\u0435\u043D\u043D\u044F\",\n                    \"zh-cn\": \"\u6838\u5B9A\u6570\",\n                },\n                type: \"boolean\",\n                role: \"switch\",\n                desc: \"Created by Adapter\",\n                def: false,\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}.noPwdAllowed`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"No Password Allowed\",\n                    de: \"Kein Passwort erlaubt\",\n                    ru: \"\u0411\u0435\u0437 \u043F\u0430\u0440\u043E\u043B\u044F\",\n                    pt: \"Nenhuma senha permitida\",\n                    nl: \"Geen wachtwoord toegestaan\",\n                    fr: \"Pas de mot de passe autoris\u00E9\",\n                    it: \"Nessuna password consentita\",\n                    es: \"No se admite contrase\u00F1a\",\n                    pl: \"Brak has\u0142a\",\n                    uk: \"\u041D\u0435\u043C\u0430\u0454 \u043F\u0430\u0440\u043E\u043B\u044F\",\n                    \"zh-cn\": \"\u6CA1\u6709\u5141\u8BB8\u7684\u5BC6\u7801\",\n                },\n                type: \"boolean\",\n                role: \"switch\",\n                desc: \"Created by Adapter\",\n                def: false,\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}.sendNotification`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"Send Notification\",\n                    de: \"Mitteilung senden\",\n                    ru: \"\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C \u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u0435\",\n                    pt: \"Enviar notifica\u00E7\u00E3o\",\n                    nl: \"Kennisgeving versturen\",\n                    fr: \"Envoyer une notification\",\n                    it: \"Invia notifica\",\n                    es: \"Enviar notificaci\u00F3n\",\n                    pl: \"Wy\u015Blij powiadomienie\",\n                    uk: \"\u041D\u0430\u0434\u0456\u0441\u043B\u0430\u0442\u0438 \u043F\u043E\u0432\u0456\u0434\u043E\u043C\u043B\u0435\u043D\u043D\u044F\",\n                    \"zh-cn\": \"\u53D1\u9001\u901A\u77E5\",\n                },\n                type: \"string\",\n                role: \"state\", //TODO: Indicator\n                desc: \"Created by Adapter\",\n                def: \"\",\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}.notificationBacklog`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"Notification Backlog\",\n                    de: \"R\u00FCckstand bei der Benachrichtigung\",\n                    ru: \"\u0423\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u044F\",\n                    pt: \"Atraso de notifica\u00E7\u00E3o\",\n                    nl: \"Kennisgeving Achterstand\",\n                    fr: \"Carnet de notifications\",\n                    it: \"Arretrati di notifica\",\n                    es: \"Notificaciones atrasadas\",\n                    pl: \"Zaleg\u0142o\u015Bci w powiadomieniach\",\n                    uk: \"\u0412\u0456\u0434\u0441\u0442\u0430\u0432\u0430\u043D\u043D\u044F \u0441\u043F\u043E\u0432\u0456\u0449\u0435\u043D\u044C\",\n                    \"zh-cn\": \"\u901A\u77E5\u79EF\u538B\",\n                },\n                type: \"array\",\n                role: \"state\",\n                desc: \"Created by Adapter\",\n                def: \"\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}.aesKey_view`, {\n            type: \"state\",\n            common: {\n                name: {\n                    \"en\": \"decrypt AES key for 30 seconds.\",\n                    \"de\": \"AES Schl\u00FCssel f\u00FCr 30 Sekunden entschl\u00FCsseln.\",\n                    \"ru\": \"\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u0430\u0442\u044C \u043A\u043B\u044E\u0447 AES \u0432 \u0442\u0435\u0447\u0435\u043D\u0438\u0435 30 \u0441\u0435\u043A\u0443\u043D\u0434.\",\n                    \"pt\": \"descriptografar AES chave por 30 segundos.\",\n                    \"nl\": \"decodeer AES sleutel gedurende 30 seconden.\",\n                    \"fr\": \"d\u00E9chiffrer la cl\u00E9 AES pendant 30 secondes.\",\n                    \"it\": \"decifrare la chiave AES per 30 secondi.\",\n                    \"es\": \"descifrar la tecla AES durante 30 segundos.\",\n                    \"pl\": \"odszyfrowa\u0107 klucz AES przez 30 sekund.\",\n                    \"uk\": \"\u0440\u043E\u0437\u0448\u0438\u0444\u0440\u0443\u0432\u0430\u0442\u0438 \u043A\u043B\u044E\u0447 AES \u043D\u0430 30 \u0441\u0435\u043A\u0443\u043D\u0434.\",\n                    \"zh-cn\": \"\u89E3\u5BC6AES\u5BC6\u94A530\u79D2.\"\n                },\n                type: \"boolean\",\n                role: \"button\",\n                desc: \"Created by Adapter\",\n                def: false,\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}.aesKey`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"Insert AES-key into the APP.\",\n                    de: \"AES-key in die APP einf\u00FCgen.\",\n                    ru: \"\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u044C AES-\u043A\u043B\u044E\u0447 \u0432 APP.\",\n                    pt: \"Insira o AES-key no APP.\",\n                    nl: \"Plaats AES-toets in de APP.\",\n                    fr: \"Ins\u00E9rer la touche AES dans l'APP.\",\n                    it: \"Inserire AES-chiave nella APP.\",\n                    es: \"Inserte AES-key en el APP.\",\n                    pl: \"Wstaw klucz AES- do APP.\",\n                    uk: \"\u0412\u0441\u0442\u0430\u0432\u0442\u0435 AES-\u043A\u043B\u044E\u0447 \u0443 APP.\",\n                    \"zh-cn\": \"\u5728APP\u4E2D\u63D2\u5165AES\u952E.\",\n                },\n                type: \"string\",\n                role: \"state\",\n                desc: \"Created by Adapter\",\n                def: \"\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        const get_aes = await this.adapter.getStateAsync(`devices.${deviceIDRep}.aesKey`);\n        const random_key = this.genRandomString(6, true);\n        //TODO Aes\n        /*if (!get_aes || get_aes.val == null || get_aes.val == \"\") {\n            await this.adapter.setStateAsync(`devices.${deviceIDRep}.aesKey`, this.adapter.encrypt(random_key.toString()), true);\n            client.aesKey = random_key;\n        } else if (get_aes != null && typeof get_aes.val === \"string\") {\n            if (get_aes.val.toString().length > 6) {\n                get_aes.val = this.adapter.decrypt(get_aes.val.toString());\n            }\n            client.aesKey = get_aes.val;\n        } else {\n            this.adapter.log.warn(\"Cannot find AES Key. Please Restart Adapter!\");\n        } */\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}.aesKey_new`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"Create new AES-Key\",\n                    de: \"Neue AES-Key erstellen\",\n                    ru: \"\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043D\u043E\u0432\u044B\u0435 AES-Key\",\n                    pt: \"Criar novo AES-Key\",\n                    nl: \"Nieuwe AES-sleutel aanmaken\",\n                    fr: \"Cr\u00E9er une nouvelle cl\u00E9 AES\",\n                    it: \"Crea nuovo AES-Key\",\n                    es: \"Crear nuevo AES-Key\",\n                    pl: \"Utw\u00F3rz nowy klucz AES-\",\n                    uk: \"\u0421\u0442\u0432\u043E\u0440\u0435\u043D\u043D\u044F \u043D\u043E\u0432\u0438\u0445 AES-Key\",\n                    \"zh-cn\": \"\u521B\u5EFA\u65B0 AES \u5BC6\u94A5\",\n                },\n                type: \"boolean\",\n                role: \"button\",\n                desc: \"Created by Adapter\",\n                def: false,\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n        await this.adapter.setObjectNotExistsAsync(`devices.${deviceIDRep}.aesKey_active`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"AES encryption active\",\n                    de: \"AES-Verschl\u00FCsselung aktiv\",\n                    ru: \"\u0410\u043A\u0442\u0438\u0432\u043D\u043E\u0435 \u0448\u0438\u0444\u0440\u043E\u0432\u0430\u043D\u0438\u0435 AES\",\n                    pt: \"AES criptografia ativa\",\n                    nl: \"AES-versleuteling actief\",\n                    fr: \"Cryptage AES actif\",\n                    it: \"AES crittografia attiva\",\n                    es: \"AES encriptaci\u00F3n activa\",\n                    pl: \"Aktywne szyfrowanie AES\",\n                    uk: \"AES \u0448\u0438\u0444\u0440\u0443\u0432\u0430\u043D\u043D\u044F \u0430\u043A\u0442\u0438\u0432\u043D\u0430\",\n                    \"zh-cn\": \"AES \u52A0\u5BC6\u6D3B\u52A8\",\n                },\n                type: \"boolean\",\n                role: \"switch\",\n                desc: \"Created by Adapter\",\n                def: false,\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n    }\n\n    private genRandomString(length: number, woCharacters: boolean): string {\n        let result = \"\";\n        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-\\\\/&%$!;<>*+#\";\n        if (woCharacters) {\n            characters = \"ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz0123456789\";\n        }\n        const charactersLength = characters.length;\n        for (let i = 0; i < length; i++) {\n            result += characters.charAt(crypto.randomInt(0, charactersLength));\n        }\n        return result;\n    }\n\n    private async genKey(): Promise<[string, string]> {\n        const key = this.genRandomString(512, false);\n        const hashedKey = await bcrypt.hash(key, 5);\n        return [key, hashedKey];\n    }\n\n    private loginDeclined(client: Client): void {\n        client.sendMSG(new LoginDeclinedPacket().toJSON(), false);\n    }\n\n    private wrongAesKey(client: Client): void {\n        client.sendMSG(new WrongAesKeyPack().toJSON(), false);\n    }\n}\n"],
  "mappings": "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",
  "names": ["state", "resolve", "rejects"]
}

{
  "version": 3,
  "sources": ["../../../src/server/services/state-service.ts"],
  "sourcesContent": ["\nimport * as m from \"../..//main\";\nimport * as grpc from \"@grpc/grpc-js\";\nimport * as proto from \"../../generated/state/state\"\nimport { SearchState, SearchStateResponse, StateSubscribtion, StateValueUpdate, StateValueUpdateRequest, StateValueUpdateResponse, UnimplementedStateUpdateService } from \"../../generated/state/state\";\nclass Test  extends UnimplementedStateUpdateService {\n    Subscibe(call: grpc.ServerWritableStream<StateSubscribtion, proto.StatesValueUpdate>): void {\n        throw new Error(\"Method not implemented.\");\n    }\n    updateValue(call: grpc.ServerUnaryCall<StateValueUpdateRequest, StateValueUpdateResponse>, callback: grpc.sendUnaryData<StateValueUpdateResponse>): void {\n        throw new Error(\"Method not implemented.\");\n    }\n    searchState(call: grpc.ServerUnaryCall<SearchState, SearchStateResponse>, callback: grpc.sendUnaryData<SearchStateResponse>): void {\n        throw new Error(\"Method not implemented.\");\n    }\n    searchStateStream(call: grpc.ServerDuplexStream<SearchState, SearchStateResponse>): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n}\n\nexport function addStateServices(gRpcServer: grpc.Server, adapter : m.SamartHomeHandyBis) {\n    gRpcServer.addService(proto.StateUpdateClient.service, {\n        Subscibe: async (call: grpc.ServerWritableStream<StateSubscribtion, proto.StatesValueUpdate>) => {\n            const result = await adapter.subscribeToDataPointsProto(call.request.stateIds);\n            const stateValueUpdates = result.map(e => {\n                return new proto.StateValueUpdate({\n                    stateId: e.objectID,\n                    stringValue: e.val.toString(),\n                    acc: e.ack,\n                    time: 0,\n                });\n            });\n            call.write(new proto.StatesValueUpdate({stateUpdates: stateValueUpdates}));\n            //TODO Device Id from header\n            adapter.listener.addWriter(\"DeviceIdFromHeader\", call);\n        } });\n\n\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,YAAuB;AACvB,mBAA0K;AAC1K,MAAM,aAAc,6CAAgC;AAAA,EAChD,SAAS,MAAmF;AACxF,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC7C;AAAA,EACA,YAAY,MAA+E,UAA8D;AACrJ,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC7C;AAAA,EACA,YAAY,MAA8D,UAAyD;AAC/H,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC7C;AAAA,EACA,kBAAkB,MAAuE;AACrF,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC7C;AAEJ;AAEO,SAAS,iBAAiB,YAAyB,SAAgC;AACtF,aAAW,WAAW,MAAM,kBAAkB,SAAS;AAAA,IACnD,UAAU,OAAO,SAAgF;AAC7F,YAAM,SAAS,MAAM,QAAQ,2BAA2B,KAAK,QAAQ,QAAQ;AAC7E,YAAM,oBAAoB,OAAO,IAAI,OAAK;AACtC,eAAO,IAAI,MAAM,iBAAiB;AAAA,UAC9B,SAAS,EAAE;AAAA,UACX,aAAa,EAAE,IAAI,SAAS;AAAA,UAC5B,KAAK,EAAE;AAAA,UACP,MAAM;AAAA,QACV,CAAC;AAAA,MACL,CAAC;AACD,WAAK,MAAM,IAAI,MAAM,kBAAkB,EAAC,cAAc,kBAAiB,CAAC,CAAC;AAEzE,cAAQ,SAAS,UAAU,sBAAsB,IAAI;AAAA,IACzD;AAAA,EAAE,CAAC;AAGX;",
  "names": []
}

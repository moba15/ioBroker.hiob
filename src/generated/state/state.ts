/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.2
 * source: state/state.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class StatesValueUpdate extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        stateUpdates?: StateValueUpdate[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("stateUpdates" in data && data.stateUpdates != undefined) {
                this.stateUpdates = data.stateUpdates;
            }
        }
    }
    get stateUpdates() {
        return pb_1.Message.getRepeatedWrapperField(this, StateValueUpdate, 2) as StateValueUpdate[];
    }
    set stateUpdates(value: StateValueUpdate[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        stateUpdates?: ReturnType<typeof StateValueUpdate.prototype.toObject>[];
    }): StatesValueUpdate {
        const message = new StatesValueUpdate({});
        if (data.stateUpdates != null) {
            message.stateUpdates = data.stateUpdates.map(item => StateValueUpdate.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            stateUpdates?: ReturnType<typeof StateValueUpdate.prototype.toObject>[];
        } = {};
        if (this.stateUpdates != null) {
            data.stateUpdates = this.stateUpdates.map((item: StateValueUpdate) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.stateUpdates.length)
            writer.writeRepeatedMessage(2, this.stateUpdates, (item: StateValueUpdate) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatesValueUpdate {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatesValueUpdate();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    reader.readMessage(message.stateUpdates, () => pb_1.Message.addToRepeatedWrapperField(message, 2, StateValueUpdate.deserialize(reader), StateValueUpdate));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StatesValueUpdate {
        return StatesValueUpdate.deserialize(bytes);
    }
}
export class StateValueUpdate extends pb_1.Message {
    #one_of_decls: number[][] = [[4, 5, 6, 99]];
    constructor(data?: any[] | ({
        stateId?: string;
        acc?: boolean;
        time?: number;
    } & (({
        stringValue?: string;
        boolValue?: never;
        doubleValue?: never;
        other?: never;
    } | {
        stringValue?: never;
        boolValue?: boolean;
        doubleValue?: never;
        other?: never;
    } | {
        stringValue?: never;
        boolValue?: never;
        doubleValue?: number;
        other?: never;
    } | {
        stringValue?: never;
        boolValue?: never;
        doubleValue?: never;
        other?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("stateId" in data && data.stateId != undefined) {
                this.stateId = data.stateId;
            }
            if ("acc" in data && data.acc != undefined) {
                this.acc = data.acc;
            }
            if ("time" in data && data.time != undefined) {
                this.time = data.time;
            }
            if ("stringValue" in data && data.stringValue != undefined) {
                this.stringValue = data.stringValue;
            }
            if ("boolValue" in data && data.boolValue != undefined) {
                this.boolValue = data.boolValue;
            }
            if ("doubleValue" in data && data.doubleValue != undefined) {
                this.doubleValue = data.doubleValue;
            }
            if ("other" in data && data.other != undefined) {
                this.other = data.other;
            }
        }
    }
    get stateId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set stateId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get acc() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set acc(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get time() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set time(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get stringValue() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set stringValue(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_stringValue() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get boolValue() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set boolValue(value: boolean) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
    }
    get has_boolValue() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get doubleValue() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set doubleValue(value: number) {
        pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
    }
    get has_doubleValue() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get other() {
        return pb_1.Message.getFieldWithDefault(this, 99, "") as string;
    }
    set other(value: string) {
        pb_1.Message.setOneofField(this, 99, this.#one_of_decls[0], value);
    }
    get has_other() {
        return pb_1.Message.getField(this, 99) != null;
    }
    get value() {
        const cases: {
            [index: number]: "none" | "stringValue" | "boolValue" | "doubleValue" | "other";
        } = {
            0: "none",
            4: "stringValue",
            5: "boolValue",
            6: "doubleValue",
            99: "other"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4, 5, 6, 99])];
    }
    static fromObject(data: {
        stateId?: string;
        acc?: boolean;
        time?: number;
        stringValue?: string;
        boolValue?: boolean;
        doubleValue?: number;
        other?: string;
    }): StateValueUpdate {
        const message = new StateValueUpdate({});
        if (data.stateId != null) {
            message.stateId = data.stateId;
        }
        if (data.acc != null) {
            message.acc = data.acc;
        }
        if (data.time != null) {
            message.time = data.time;
        }
        if (data.stringValue != null) {
            message.stringValue = data.stringValue;
        }
        if (data.boolValue != null) {
            message.boolValue = data.boolValue;
        }
        if (data.doubleValue != null) {
            message.doubleValue = data.doubleValue;
        }
        if (data.other != null) {
            message.other = data.other;
        }
        return message;
    }
    toObject() {
        const data: {
            stateId?: string;
            acc?: boolean;
            time?: number;
            stringValue?: string;
            boolValue?: boolean;
            doubleValue?: number;
            other?: string;
        } = {};
        if (this.stateId != null) {
            data.stateId = this.stateId;
        }
        if (this.acc != null) {
            data.acc = this.acc;
        }
        if (this.time != null) {
            data.time = this.time;
        }
        if (this.stringValue != null) {
            data.stringValue = this.stringValue;
        }
        if (this.boolValue != null) {
            data.boolValue = this.boolValue;
        }
        if (this.doubleValue != null) {
            data.doubleValue = this.doubleValue;
        }
        if (this.other != null) {
            data.other = this.other;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.stateId.length)
            writer.writeString(1, this.stateId);
        if (this.acc != false)
            writer.writeBool(2, this.acc);
        if (this.time != 0)
            writer.writeUint64(3, this.time);
        if (this.has_stringValue)
            writer.writeString(4, this.stringValue);
        if (this.has_boolValue)
            writer.writeBool(5, this.boolValue);
        if (this.has_doubleValue)
            writer.writeDouble(6, this.doubleValue);
        if (this.has_other)
            writer.writeString(99, this.other);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StateValueUpdate {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StateValueUpdate();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.stateId = reader.readString();
                    break;
                case 2:
                    message.acc = reader.readBool();
                    break;
                case 3:
                    message.time = reader.readUint64();
                    break;
                case 4:
                    message.stringValue = reader.readString();
                    break;
                case 5:
                    message.boolValue = reader.readBool();
                    break;
                case 6:
                    message.doubleValue = reader.readDouble();
                    break;
                case 99:
                    message.other = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StateValueUpdate {
        return StateValueUpdate.deserialize(bytes);
    }
}
export class StateValueUpdateRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[3, 4, 5, 99]];
    constructor(data?: any[] | ({
        userId?: string;
        stateId?: string;
    } & (({
        stringValue?: string;
        boolValue?: never;
        doubleValue?: never;
        other?: never;
    } | {
        stringValue?: never;
        boolValue?: boolean;
        doubleValue?: never;
        other?: never;
    } | {
        stringValue?: never;
        boolValue?: never;
        doubleValue?: number;
        other?: never;
    } | {
        stringValue?: never;
        boolValue?: never;
        doubleValue?: never;
        other?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
            if ("stateId" in data && data.stateId != undefined) {
                this.stateId = data.stateId;
            }
            if ("stringValue" in data && data.stringValue != undefined) {
                this.stringValue = data.stringValue;
            }
            if ("boolValue" in data && data.boolValue != undefined) {
                this.boolValue = data.boolValue;
            }
            if ("doubleValue" in data && data.doubleValue != undefined) {
                this.doubleValue = data.doubleValue;
            }
            if ("other" in data && data.other != undefined) {
                this.other = data.other;
            }
        }
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set userId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get stateId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set stateId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get stringValue() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set stringValue(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_stringValue() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get boolValue() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set boolValue(value: boolean) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_boolValue() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get doubleValue() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set doubleValue(value: number) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
    }
    get has_doubleValue() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get other() {
        return pb_1.Message.getFieldWithDefault(this, 99, "") as string;
    }
    set other(value: string) {
        pb_1.Message.setOneofField(this, 99, this.#one_of_decls[0], value);
    }
    get has_other() {
        return pb_1.Message.getField(this, 99) != null;
    }
    get value() {
        const cases: {
            [index: number]: "none" | "stringValue" | "boolValue" | "doubleValue" | "other";
        } = {
            0: "none",
            3: "stringValue",
            4: "boolValue",
            5: "doubleValue",
            99: "other"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 99])];
    }
    static fromObject(data: {
        userId?: string;
        stateId?: string;
        stringValue?: string;
        boolValue?: boolean;
        doubleValue?: number;
        other?: string;
    }): StateValueUpdateRequest {
        const message = new StateValueUpdateRequest({});
        if (data.userId != null) {
            message.userId = data.userId;
        }
        if (data.stateId != null) {
            message.stateId = data.stateId;
        }
        if (data.stringValue != null) {
            message.stringValue = data.stringValue;
        }
        if (data.boolValue != null) {
            message.boolValue = data.boolValue;
        }
        if (data.doubleValue != null) {
            message.doubleValue = data.doubleValue;
        }
        if (data.other != null) {
            message.other = data.other;
        }
        return message;
    }
    toObject() {
        const data: {
            userId?: string;
            stateId?: string;
            stringValue?: string;
            boolValue?: boolean;
            doubleValue?: number;
            other?: string;
        } = {};
        if (this.userId != null) {
            data.userId = this.userId;
        }
        if (this.stateId != null) {
            data.stateId = this.stateId;
        }
        if (this.stringValue != null) {
            data.stringValue = this.stringValue;
        }
        if (this.boolValue != null) {
            data.boolValue = this.boolValue;
        }
        if (this.doubleValue != null) {
            data.doubleValue = this.doubleValue;
        }
        if (this.other != null) {
            data.other = this.other;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.userId.length)
            writer.writeString(1, this.userId);
        if (this.stateId.length)
            writer.writeString(2, this.stateId);
        if (this.has_stringValue)
            writer.writeString(3, this.stringValue);
        if (this.has_boolValue)
            writer.writeBool(4, this.boolValue);
        if (this.has_doubleValue)
            writer.writeDouble(5, this.doubleValue);
        if (this.has_other)
            writer.writeString(99, this.other);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StateValueUpdateRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StateValueUpdateRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.userId = reader.readString();
                    break;
                case 2:
                    message.stateId = reader.readString();
                    break;
                case 3:
                    message.stringValue = reader.readString();
                    break;
                case 4:
                    message.boolValue = reader.readBool();
                    break;
                case 5:
                    message.doubleValue = reader.readDouble();
                    break;
                case 99:
                    message.other = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StateValueUpdateRequest {
        return StateValueUpdateRequest.deserialize(bytes);
    }
}
export class StateValueUpdateResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        suc?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("suc" in data && data.suc != undefined) {
                this.suc = data.suc;
            }
        }
    }
    get suc() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set suc(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        suc?: boolean;
    }): StateValueUpdateResponse {
        const message = new StateValueUpdateResponse({});
        if (data.suc != null) {
            message.suc = data.suc;
        }
        return message;
    }
    toObject() {
        const data: {
            suc?: boolean;
        } = {};
        if (this.suc != null) {
            data.suc = this.suc;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.suc != false)
            writer.writeBool(1, this.suc);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StateValueUpdateResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StateValueUpdateResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.suc = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StateValueUpdateResponse {
        return StateValueUpdateResponse.deserialize(bytes);
    }
}
export class StateSubscribtion extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: StateSubscribtion.SubscriptionType;
        stateIds?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("stateIds" in data && data.stateIds != undefined) {
                this.stateIds = data.stateIds;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 2, StateSubscribtion.SubscriptionType.cancle) as StateSubscribtion.SubscriptionType;
    }
    set type(value: StateSubscribtion.SubscriptionType) {
        pb_1.Message.setField(this, 2, value);
    }
    get stateIds() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
    }
    set stateIds(value: string[]) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        type?: StateSubscribtion.SubscriptionType;
        stateIds?: string[];
    }): StateSubscribtion {
        const message = new StateSubscribtion({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.stateIds != null) {
            message.stateIds = data.stateIds;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: StateSubscribtion.SubscriptionType;
            stateIds?: string[];
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.stateIds != null) {
            data.stateIds = this.stateIds;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != StateSubscribtion.SubscriptionType.cancle)
            writer.writeEnum(2, this.type);
        if (this.stateIds.length)
            writer.writeRepeatedString(3, this.stateIds);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StateSubscribtion {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StateSubscribtion();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.type = reader.readEnum();
                    break;
                case 3:
                    pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StateSubscribtion {
        return StateSubscribtion.deserialize(bytes);
    }
}
export namespace StateSubscribtion {
    export enum SubscriptionType {
        cancle = 0,
        subscripe = 1
    }
}
export class SearchState extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        userId?: string;
        query?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
            if ("query" in data && data.query != undefined) {
                this.query = data.query;
            }
        }
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set userId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get query() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set query(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        userId?: string;
        query?: string;
    }): SearchState {
        const message = new SearchState({});
        if (data.userId != null) {
            message.userId = data.userId;
        }
        if (data.query != null) {
            message.query = data.query;
        }
        return message;
    }
    toObject() {
        const data: {
            userId?: string;
            query?: string;
        } = {};
        if (this.userId != null) {
            data.userId = this.userId;
        }
        if (this.query != null) {
            data.query = this.query;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.userId.length)
            writer.writeString(1, this.userId);
        if (this.query.length)
            writer.writeString(2, this.query);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchState {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchState();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.userId = reader.readString();
                    break;
                case 2:
                    message.query = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SearchState {
        return SearchState.deserialize(bytes);
    }
}
export class SearchStateResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        states?: State[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("states" in data && data.states != undefined) {
                this.states = data.states;
            }
        }
    }
    get states() {
        return pb_1.Message.getRepeatedWrapperField(this, State, 1) as State[];
    }
    set states(value: State[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        states?: ReturnType<typeof State.prototype.toObject>[];
    }): SearchStateResponse {
        const message = new SearchStateResponse({});
        if (data.states != null) {
            message.states = data.states.map(item => State.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            states?: ReturnType<typeof State.prototype.toObject>[];
        } = {};
        if (this.states != null) {
            data.states = this.states.map((item: State) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.states.length)
            writer.writeRepeatedMessage(1, this.states, (item: State) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchStateResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchStateResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.states, () => pb_1.Message.addToRepeatedWrapperField(message, 1, State.deserialize(reader), State));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SearchStateResponse {
        return SearchStateResponse.deserialize(bytes);
    }
}
export class State extends pb_1.Message {
    #one_of_decls: number[][] = [[3, 4, 5, 99], [6]];
    constructor(data?: any[] | ({
        stateId?: string;
    } & (({
        stringValue?: string;
        boolValue?: never;
        doubleValue?: never;
        other?: never;
    } | {
        stringValue?: never;
        boolValue?: boolean;
        doubleValue?: never;
        other?: never;
    } | {
        stringValue?: never;
        boolValue?: never;
        doubleValue?: number;
        other?: never;
    } | {
        stringValue?: never;
        boolValue?: never;
        doubleValue?: never;
        other?: string;
    }) | ({
        common?: State.StateCommon;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("stateId" in data && data.stateId != undefined) {
                this.stateId = data.stateId;
            }
            if ("stringValue" in data && data.stringValue != undefined) {
                this.stringValue = data.stringValue;
            }
            if ("boolValue" in data && data.boolValue != undefined) {
                this.boolValue = data.boolValue;
            }
            if ("doubleValue" in data && data.doubleValue != undefined) {
                this.doubleValue = data.doubleValue;
            }
            if ("other" in data && data.other != undefined) {
                this.other = data.other;
            }
            if ("common" in data && data.common != undefined) {
                this.common = data.common;
            }
        }
    }
    get stateId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set stateId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get stringValue() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set stringValue(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_stringValue() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get boolValue() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set boolValue(value: boolean) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_boolValue() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get doubleValue() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set doubleValue(value: number) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
    }
    get has_doubleValue() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get other() {
        return pb_1.Message.getFieldWithDefault(this, 99, "") as string;
    }
    set other(value: string) {
        pb_1.Message.setOneofField(this, 99, this.#one_of_decls[0], value);
    }
    get has_other() {
        return pb_1.Message.getField(this, 99) != null;
    }
    get common() {
        return pb_1.Message.getWrapperField(this, State.StateCommon, 6) as State.StateCommon;
    }
    set common(value: State.StateCommon) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[1], value);
    }
    get has_common() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get value() {
        const cases: {
            [index: number]: "none" | "stringValue" | "boolValue" | "doubleValue" | "other";
        } = {
            0: "none",
            3: "stringValue",
            4: "boolValue",
            5: "doubleValue",
            99: "other"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 99])];
    }
    get _common() {
        const cases: {
            [index: number]: "none" | "common";
        } = {
            0: "none",
            6: "common"
        };
        return cases[pb_1.Message.computeOneofCase(this, [6])];
    }
    static fromObject(data: {
        stateId?: string;
        stringValue?: string;
        boolValue?: boolean;
        doubleValue?: number;
        other?: string;
        common?: ReturnType<typeof State.StateCommon.prototype.toObject>;
    }): State {
        const message = new State({});
        if (data.stateId != null) {
            message.stateId = data.stateId;
        }
        if (data.stringValue != null) {
            message.stringValue = data.stringValue;
        }
        if (data.boolValue != null) {
            message.boolValue = data.boolValue;
        }
        if (data.doubleValue != null) {
            message.doubleValue = data.doubleValue;
        }
        if (data.other != null) {
            message.other = data.other;
        }
        if (data.common != null) {
            message.common = State.StateCommon.fromObject(data.common);
        }
        return message;
    }
    toObject() {
        const data: {
            stateId?: string;
            stringValue?: string;
            boolValue?: boolean;
            doubleValue?: number;
            other?: string;
            common?: ReturnType<typeof State.StateCommon.prototype.toObject>;
        } = {};
        if (this.stateId != null) {
            data.stateId = this.stateId;
        }
        if (this.stringValue != null) {
            data.stringValue = this.stringValue;
        }
        if (this.boolValue != null) {
            data.boolValue = this.boolValue;
        }
        if (this.doubleValue != null) {
            data.doubleValue = this.doubleValue;
        }
        if (this.other != null) {
            data.other = this.other;
        }
        if (this.common != null) {
            data.common = this.common.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.stateId.length)
            writer.writeString(1, this.stateId);
        if (this.has_stringValue)
            writer.writeString(3, this.stringValue);
        if (this.has_boolValue)
            writer.writeBool(4, this.boolValue);
        if (this.has_doubleValue)
            writer.writeDouble(5, this.doubleValue);
        if (this.has_other)
            writer.writeString(99, this.other);
        if (this.has_common)
            writer.writeMessage(6, this.common, () => this.common.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): State {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new State();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.stateId = reader.readString();
                    break;
                case 3:
                    message.stringValue = reader.readString();
                    break;
                case 4:
                    message.boolValue = reader.readBool();
                    break;
                case 5:
                    message.doubleValue = reader.readDouble();
                    break;
                case 99:
                    message.other = reader.readString();
                    break;
                case 6:
                    reader.readMessage(message.common, () => message.common = State.StateCommon.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): State {
        return State.deserialize(bytes);
    }
}
export namespace State {
    export class StateCommon extends pb_1.Message {
        #one_of_decls: number[][] = [[7], [8], [9], [10]];
        constructor(data?: any[] | ({
            name?: string;
            desc?: string;
            type?: State.StateCommon.StateType;
            read?: boolean;
            write?: boolean;
            role?: string;
        } & (({
            unit?: string;
        }) | ({
            step?: number;
        }) | ({
            min?: number;
        }) | ({
            max?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("desc" in data && data.desc != undefined) {
                    this.desc = data.desc;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("read" in data && data.read != undefined) {
                    this.read = data.read;
                }
                if ("write" in data && data.write != undefined) {
                    this.write = data.write;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("unit" in data && data.unit != undefined) {
                    this.unit = data.unit;
                }
                if ("step" in data && data.step != undefined) {
                    this.step = data.step;
                }
                if ("min" in data && data.min != undefined) {
                    this.min = data.min;
                }
                if ("max" in data && data.max != undefined) {
                    this.max = data.max;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get desc() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set desc(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, State.StateCommon.StateType.boolean) as State.StateCommon.StateType;
        }
        set type(value: State.StateCommon.StateType) {
            pb_1.Message.setField(this, 3, value);
        }
        get read() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set read(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get write() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set write(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get unit() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set unit(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[0], value);
        }
        get has_unit() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get step() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set step(value: number) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[1], value);
        }
        get has_step() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get min() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set min(value: number) {
            pb_1.Message.setOneofField(this, 9, this.#one_of_decls[2], value);
        }
        get has_min() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get max() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set max(value: number) {
            pb_1.Message.setOneofField(this, 10, this.#one_of_decls[3], value);
        }
        get has_max() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get _unit() {
            const cases: {
                [index: number]: "none" | "unit";
            } = {
                0: "none",
                7: "unit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        get _step() {
            const cases: {
                [index: number]: "none" | "step";
            } = {
                0: "none",
                8: "step"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        get _min() {
            const cases: {
                [index: number]: "none" | "min";
            } = {
                0: "none",
                9: "min"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        get _max() {
            const cases: {
                [index: number]: "none" | "max";
            } = {
                0: "none",
                10: "max"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10])];
        }
        static fromObject(data: {
            name?: string;
            desc?: string;
            type?: State.StateCommon.StateType;
            read?: boolean;
            write?: boolean;
            role?: string;
            unit?: string;
            step?: number;
            min?: number;
            max?: number;
        }): StateCommon {
            const message = new StateCommon({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.desc != null) {
                message.desc = data.desc;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.read != null) {
                message.read = data.read;
            }
            if (data.write != null) {
                message.write = data.write;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.unit != null) {
                message.unit = data.unit;
            }
            if (data.step != null) {
                message.step = data.step;
            }
            if (data.min != null) {
                message.min = data.min;
            }
            if (data.max != null) {
                message.max = data.max;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                desc?: string;
                type?: State.StateCommon.StateType;
                read?: boolean;
                write?: boolean;
                role?: string;
                unit?: string;
                step?: number;
                min?: number;
                max?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.desc != null) {
                data.desc = this.desc;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.read != null) {
                data.read = this.read;
            }
            if (this.write != null) {
                data.write = this.write;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.unit != null) {
                data.unit = this.unit;
            }
            if (this.step != null) {
                data.step = this.step;
            }
            if (this.min != null) {
                data.min = this.min;
            }
            if (this.max != null) {
                data.max = this.max;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.desc.length)
                writer.writeString(2, this.desc);
            if (this.type != State.StateCommon.StateType.boolean)
                writer.writeEnum(3, this.type);
            if (this.read != false)
                writer.writeBool(4, this.read);
            if (this.write != false)
                writer.writeBool(5, this.write);
            if (this.role.length)
                writer.writeString(6, this.role);
            if (this.has_unit)
                writer.writeString(7, this.unit);
            if (this.has_step)
                writer.writeInt32(8, this.step);
            if (this.has_min)
                writer.writeInt32(9, this.min);
            if (this.has_max)
                writer.writeInt32(10, this.max);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StateCommon {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StateCommon();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.desc = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readEnum();
                        break;
                    case 4:
                        message.read = reader.readBool();
                        break;
                    case 5:
                        message.write = reader.readBool();
                        break;
                    case 6:
                        message.role = reader.readString();
                        break;
                    case 7:
                        message.unit = reader.readString();
                        break;
                    case 8:
                        message.step = reader.readInt32();
                        break;
                    case 9:
                        message.min = reader.readInt32();
                        break;
                    case 10:
                        message.max = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StateCommon {
            return StateCommon.deserialize(bytes);
        }
    }
    export namespace StateCommon {
        export enum StateType {
            boolean = 0,
            str = 1,
            number = 2
        }
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedStateUpdateService {
    static definition = {
        Subscibe: {
            path: "/StateUpdate/Subscibe",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: StateSubscribtion) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => StateSubscribtion.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: StatesValueUpdate) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => StatesValueUpdate.deserialize(new Uint8Array(bytes))
        },
        updateValue: {
            path: "/StateUpdate/updateValue",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: StateValueUpdateRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => StateValueUpdateRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: StateValueUpdateResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => StateValueUpdateResponse.deserialize(new Uint8Array(bytes))
        },
        searchState: {
            path: "/StateUpdate/searchState",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SearchState) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SearchState.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SearchStateResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SearchStateResponse.deserialize(new Uint8Array(bytes))
        },
        searchStateStream: {
            path: "/StateUpdate/searchStateStream",
            requestStream: true,
            responseStream: true,
            requestSerialize: (message: SearchState) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SearchState.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SearchStateResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SearchStateResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Subscibe(call: grpc_1.ServerWritableStream<StateSubscribtion, StatesValueUpdate>): void;
    abstract updateValue(call: grpc_1.ServerUnaryCall<StateValueUpdateRequest, StateValueUpdateResponse>, callback: grpc_1.sendUnaryData<StateValueUpdateResponse>): void;
    abstract searchState(call: grpc_1.ServerUnaryCall<SearchState, SearchStateResponse>, callback: grpc_1.sendUnaryData<SearchStateResponse>): void;
    abstract searchStateStream(call: grpc_1.ServerDuplexStream<SearchState, SearchStateResponse>): void;
}
export class StateUpdateClient extends grpc_1.makeGenericClientConstructor(UnimplementedStateUpdateService.definition, "StateUpdate", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    Subscibe: GrpcStreamServiceInterface<StateSubscribtion, StatesValueUpdate> = (message: StateSubscribtion, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<StatesValueUpdate> => {
        return super.Subscibe(message, metadata, options);
    };
    updateValue: GrpcUnaryServiceInterface<StateValueUpdateRequest, StateValueUpdateResponse> = (message: StateValueUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StateValueUpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StateValueUpdateResponse>, callback?: grpc_1.requestCallback<StateValueUpdateResponse>): grpc_1.ClientUnaryCall => {
        return super.updateValue(message, metadata, options, callback);
    };
    searchState: GrpcUnaryServiceInterface<SearchState, SearchStateResponse> = (message: SearchState, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SearchStateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SearchStateResponse>, callback?: grpc_1.requestCallback<SearchStateResponse>): grpc_1.ClientUnaryCall => {
        return super.searchState(message, metadata, options, callback);
    };
    searchStateStream: GrpcChunkServiceInterface<SearchState, SearchStateResponse> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<SearchState, SearchStateResponse> => {
        return super.searchStateStream(metadata, options);
    };
}
